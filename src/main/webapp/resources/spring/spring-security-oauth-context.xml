<?xml version="1.0" encoding="UTF-8" ?>
<beans
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:sec="http://www.springframework.org/schema/security"
        xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
        xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
               http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
               http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
               http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd  
               http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd 
        ">
 
<!-- Security HTTP Pattern S -->
        <!-- OAuth Token 발급 설정, stateless:Session을 생성하지 않는다. -->
        <sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>
 
        <!-- REST API 설정, never:로그인전에는 Session을 생성하지 않는다. -->
    <sec:http pattern="/api/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint">
        <sec:intercept-url pattern="/api/**" access="ROLE_USER" />
        <sec:anonymous enabled="false" />
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>
<!-- Security HTTP Pattern E -->
 
<!-- EntryPoint S -->
    <bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>
   
    <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="pureTestResource/client" />
        <property name="typeName" value="Basic" />
    </bean>
    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="pureTestResource" />
    </bean>
<!-- EntryPoint E -->
       
        <!-- 권한이 없을 경우 발생하는 에러를 잡아서 처리하는 핸들러 -->
    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
    </bean>
 
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService"  />
    </sec:authentication-manager>
 
    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>
 
    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="pureClient1" authorized-grant-types="password,authorization_code,refresh_token,implicit"
        authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust" secret="secret" access-token-validity="120" />
       
        <oauth:client client-id="pureClient2" authorized-grant-types="client_credentials"
        authorities="ROLE_CLIENT" scope="read" secret="secret" />
    </oauth:client-details-service>
 
        <!-- 사용자 정보 = grant: password -->
    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider>
            <sec:user-service>
                <sec:user name="pureUserId1" password="purePassword" authorities="ROLE_USER"/>
                <sec:user name="pureUserId2" password="purePassword" authorities="ROLE_USER"/>
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>
   
        <!-- OAuth 인증 서버 설정 -->
    <oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices">
        <!-- 클라이언트가 인증 코드를 얻음으로써 액세스 토큰을 획득하는 방법 -->
        <oauth:authorization-code/>
        <!-- 클라이언트 자격 증명의 구성 형식을 부여 -->
        <oauth:implicit/>
        <!-- 리프레시 허가 토큰 유형의 구성 -->
        <oauth:refresh-token/>
        <!-- 클라이언트 자격 증명의 구성 형식을 부여 -->
        <oauth:client-credentials />
        <!-- 리소스 소유자 암호 부여 타입 -->
        <oauth:password authentication-manager-ref="authenticationManager"/>
        <!-- 사용자 정의 유형의 구성
        <oauth:custom-grant token-granter-ref=""/> -->
    </oauth:authorization-server>
 
        <!-- OAuth Resource Server 설정, -->
    <oauth:resource-server id="resourceServerFilter" resource-id="pureTestResource" token-services-ref="tokenServices" />
 
        <!-- Token 저장 방식, 메모리 -->
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />
 
        <!-- Token 관리 서비스 -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="supportRefreshToken" value="true"/>
        <property name="accessTokenValiditySeconds" value="900000000"/>
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>
   
 
</beans>
